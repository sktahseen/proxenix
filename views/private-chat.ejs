<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with <%= recipient %> - <%= username %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Reuse the same CSS as chat.ejs */
    <%= include('chat.ejs', { cssOnly: true }) %>
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="sidebar">
      <div class="sidebar-header">
        <h2><i class="fas fa-users me-2"></i>Users</h2>
        <button class="btn btn-sm btn-outline-light" id="close-sidebar">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="user-list">
        <div class="mb-3">
          <label for="status-input" class="form-label">Update Status</label>
          <input type="text" id="status-input" class="form-control" placeholder="Enter your status...">
          <button id="update-status-btn" class="btn btn-sm btn-primary mt-2">Update</button>
        </div>
        <div id="user-list">
          <% users.forEach(user => { %>
            <div class="user-item" data-username="<%= user.username %>">
              <div class="user-avatar"><%= user.username.charAt(0).toUpperCase() %></div>
              <div class="user-info">
                <div class="user-name"><%= user.username %></div>
                <div class="user-status"><%= user.status %></div>
                <div class="<%= user.online ? 'user-online' : 'user-last-seen' %>">
                  <%= user.online ? 'Online' : 'Last seen: ' + new Date(user.lastSeen).toLocaleString() %>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
    <div class="main-chat d-flex flex-column">
      <div class="chat-header d-flex justify-content-between align-items-center">
        <div>
          <h1 id="chat-title"><i class="fas fa-user me-2"></i>Chat with <%= recipient %></h1>
          <div class="user-status">
            <span class="online"><i class="fas fa-circle me-1"></i>Online as <%= username %></span>
            <span id="chat-mode-toggle" class="chat-mode-toggle ms-2">Back to Group Chat</span>
          </div>
        </div>
        <button class="btn btn-sm btn-outline-light" id="toggle-sidebar">
          <i class="fas fa-users"></i>
        </button>
      </div>
      
      <ul id="messages" class="flex-grow-1 list-unstyled">
        <% privateMessages.forEach(msg => { %>
          <li class="message <%= msg.sender === username ? 'message-sent' : 'message-received' %>" data-message-type="private">
            <% if (msg.sender !== username) { %>
              <div class="message-user"><%= msg.sender %></div>
            <% } %>
            <% if (msg.messageType === 'text') { %>
              <div class="message-text"><%= msg.text %></div>
            <% } else if (msg.messageType === 'image') { %>
              <img src="<%= msg.imagePath %>" class="message-image" alt="Shared image">
            <% } %>
            <div class="message-time">
              <%= new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
              <% if (msg.sender === username) { %>
                <i class="fas fa-check ms-1"></i>
              <% } %>
            </div>
          </li>
        <% }); %>
      </ul>
      
      <div id="typing-indicator" class="typing-indicator"></div>
      
      <div class="chat-input-container position-relative">
        <button class="btn-emoji" id="btn-emoji">
          <i class="far fa-smile"></i>
        </button>
        
        <div class="emoji-picker" id="emoji-picker">
          <!-- Emojis will be added here by JavaScript -->
        </div>
        
        <button class="btn-attach" id="btn-attach">
          <i class="fas fa-paperclip"></i>
        </button>
        
        <input type="file" id="image-upload" accept="image/jpeg,image/jpg,image/png,image/gif" style="display: none;">
        
        <input type="text" id="input" class="form-control" autocomplete="off" placeholder="Type a message...">
        
        <button class="btn-send" id="btn-send" type="submit">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let token = null;
      const cookies = document.cookie.split(';');
      for (const cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'token') {
          token = value;
          break;
        }
      }

      if (!token) {
        console.error('No token found in cookies');
        window.location.href = '/login';
        return;
      }

      const socket = io({ query: { token: token } });
      const input = document.getElementById('input');
      const messages = document.getElementById('messages');
      const btnEmoji = document.getElementById('btn-emoji');
      const emojiPicker = document.getElementById('emoji-picker');
      const btnSend = document.getElementById('btn-send');
      const btnAttach = document.getElementById('btn-attach');
      const imageUpload = document.getElementById('image-upload');
      const statusInput = document.getElementById('status-input');
      const updateStatusBtn = document.getElementById('update-status-btn');
      const toggleSidebar = document.getElementById('toggle-sidebar');
      const closeSidebar = document.getElementById('close-sidebar');
      const sidebar = document.querySelector('.sidebar');
      const typingIndicator = document.getElementById('typing-indicator');
      const chatTitle = document.getElementById('chat-title');
      const chatModeToggle = document.getElementById('chat-mode-toggle');
      const userList = document.getElementById('user-list');

      let chatMode = 'private';
      let currentRecipient = '<%= recipient %>';

      const emojis = ['😀', '😊', '😂', '❤️', '👍', '👎', '🔥', '🎉', '🤔', '😢', '😡', '👀'];

      emojis.forEach(emoji => {
        const span = document.createElement('span');
        span.className = 'emoji-option';
        span.textContent = emoji;
        span.addEventListener('click', () => {
          input.value += emoji;
          input.focus();
          emojiPicker.classList.remove('show');
        });
        emojiPicker.appendChild(span);
      });

      btnEmoji.addEventListener('click', (e) => {
        e.preventDefault();
        emojiPicker.classList.toggle('show');
      });

      document.addEventListener('click', (e) => {
        if (!btnEmoji.contains(e.target) && !emojiPicker.contains(e.target)) {
          emojiPicker.classList.remove('show');
        }
      });

      toggleSidebar.addEventListener('click', () => {
        sidebar.classList.toggle('show');
      });

      closeSidebar.addEventListener('click', () => {
        sidebar.classList.remove('show');
      });

      chatModeToggle.addEventListener('click', () => {
        if (chatMode === 'private') {
          window.location.href = '/chat';
        }
      });

      userList.addEventListener('click', (e) => {
        const userItem = e.target.closest('.user-item');
        if (userItem) {
          const recipient = userItem.dataset.username;
          if (recipient !== '<%= username %>') {
            window.location.href = `/private-chat/${recipient}`;
          }
        }
      });

      btnSend.addEventListener('click', (e) => {
        e.preventDefault();
        sendMessage();
      });

      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });

      function sendMessage() {
        if (input.value.trim()) {
          const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          const messageData = {
            sender: '<%= username %>',
            recipient: currentRecipient,
            text: input.value.trim(),
            timestamp: timestamp,
            chatType: 'private'
          };
          socket.emit('private message', messageData);
          input.value = '';
        }
      }

      btnAttach.addEventListener('click', () => {
        imageUpload.click();
      });

      imageUpload.addEventListener('change', () => {
        const file = imageUpload.files[0];
        if (file) {
          const formData = new FormData();
          formData.append('image', file);
          formData.append('chatType', 'private');
          formData.append('recipient', currentRecipient);
          fetch('/upload-image', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
            },
            body: formData
          })
            .then(res => res.json())
            .then(data => {
              if (!data.success) {
                alert(data.error);
              }
            })
            .catch(err => console.error('Image upload error:', err));
          imageUpload.value = '';
        }
      });

      updateStatusBtn.addEventListener('click', () => {
        const status = statusInput.value.trim();
        if (status) {
          fetch('/update-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({ status })
          })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                statusInput.value = '';
              } else {
                alert(data.error);
              }
            });
        }
      });

      socket.on('private message', (msg) => {
        if (msg.sender === currentRecipient || msg.recipient === currentRecipient) {
          appendMessage(msg, 'private');
        }
      });

      socket.on('chat message', () => {
        // Ignore group messages in private chat
      });

      function appendMessage(msg, messageType) {
        const isCurrentUser = msg.sender === '<%= username %>';
        const item = document.createElement('li');
        item.className = `message ${isCurrentUser ? 'message-sent' : 'message-received'}`;
        item.dataset.messageType = messageType;

        if (!isCurrentUser) {
          item.innerHTML += `<div class="message-user">${msg.sender}</div>`;
        }

        if (msg.messageType === 'text') {
          item.innerHTML += `<div class="message-text">${msg.text}</div>`;
        } else if (msg.messageType === 'image') {
          item.innerHTML += `<img src="${msg.imagePath}" class="message-image" alt="Shared image">`;
        }

        item.innerHTML += `
          <div class="message-time">${new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} ${isCurrentUser ? '<i class="fas fa-check ms-1"></i>' : ''}</div>
        `;

        messages.appendChild(item);
        scrollToBottom();
      }

      socket.on('emoji reaction', (data) => {
        if (data.chatType === 'private' && (data.sender === currentRecipient || data.recipient === currentRecipient)) {
          const item = document.createElement('li');
          item.className = 'message system-message';
          item.innerHTML = `
            <div class="emoji-reaction">
              <span class="me-1">${data.user} reacted with</span>
              <span class="emoji">${data.emoji}</span>
            </div>
          `;
          messages.appendChild(item);
          scrollToBottom();
        }
      });

      let typingTimeout;
      input.addEventListener('input', () => {
        const typingData = { user: '<%= username %>', chatType: 'private', recipient: currentRecipient };
        socket.emit('typing', typingData);
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
          socket.emit('stop typing', typingData);
        }, 1000);
      });

      socket.on('typing', (data) => {
        if (data.chatType === 'private' && data.user === currentRecipient) {
          typingIndicator.textContent = `${data.user} is typing...`;
        }
      });

      socket.on('stop typing', (data) => {
        if (data.chatType === 'private' && data.user === currentRecipient) {
          typingIndicator.textContent = '';
        }
      });

      socket.on('status update', (data) => {
        const userItems = document.querySelectorAll('.user-item');
        userItems.forEach(item => {
          const userName = item.querySelector('.user-name').textContent;
          if (userName === data.username) {
            if (data.status) {
              item.querySelector('.user-status').textContent = data.status;
            }
            if (data.online !== undefined) {
              const statusEl = item.querySelector('.user-online, .user-last-seen');
              statusEl.textContent = data.online ? 'Online' : `Last seen: ${new Date().toLocaleString()}`;
              statusEl.className = data.online ? 'user-online' : 'user-last-seen';
            }
          }
        });
      });

      function scrollToBottom() {
        messages.scrollTop = messages.scrollHeight;
      }
    });
  </script>
</body>
</html>