<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat App - <%= username %></title>
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom CSS -->
  <style>
    :root {
      --primary-color: #128c7e;
      --secondary-color: #25d366;
      --accent-color: #34b7f1;
      --dark-color: #1f2937;
      --light-color: #f8fafc;
      --message-sent: #dcf8c6;
      --message-received: #ffffff;
      --online-color: #10b981;
      --offline-color: #ef4444;
      --sidebar-bg: #f1f5f9;
      --border-color: #e2e8f0;
      --hover-color: #f3f4f6;
      --warning-color: #f59e0b;
      --success-color: #10b981;
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      margin: 0;
      height: 100vh;
      overflow: hidden;
    }

    .chat-container {
      display: flex;
      height: 100vh;
      width: 100vw;
      backdrop-filter: blur(10px);
      background: rgba(255, 255, 255, 0.95);
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
      border-radius: 12px;
      margin: 8px;
      height: calc(100vh - 16px);
    }

    .sidebar {
      width: 380px;
      background: var(--sidebar-bg);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      box-shadow: 2px 0 10px rgba(0,0,0,0.1);
      border-radius: 12px 0 0 12px;
    }

    .sidebar-header {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: white;
      padding: 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      border-radius: 12px 0 0 0;
      position: relative;
    }

    .sidebar-header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    }

    .sidebar-header h2 {
      font-size: 1.4rem;
      margin: 0;
      font-weight: 600;
      display: flex;
      align-items: center;
    }

    .app-logo {
      width: 32px;
      height: 32px;
      background: rgba(255,255,255,0.2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.5rem;
    }

    .user-list {
      flex-grow: 1;
      overflow-y: auto;
      padding: 1rem;
    }

    .status-section {
      background: white;
      border-radius: 16px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 4px 16px rgba(0,0,0,0.08);
      border: 1px solid var(--border-color);
      position: relative;
      overflow: hidden;
    }

    .status-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    }

    .status-section label {
      font-weight: 700;
      color: var(--dark-color);
      margin-bottom: 0.75rem;
      display: flex;
      align-items: center;
      font-size: 0.95rem;
    }

    #status-input {
      border-radius: 12px;
      border: 2px solid var(--border-color);
      padding: 1rem;
      transition: all 0.3s ease;
      font-size: 0.95rem;
      background: var(--light-color);
    }

    #status-input:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 4px rgba(18, 140, 126, 0.1);
      background: white;
    }

    #update-status-btn {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      border: none;
      border-radius: 12px;
      padding: 0.75rem 1.5rem;
      font-weight: 600;
      transition: all 0.3s ease;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    #update-status-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(37, 211, 102, 0.4);
    }

    #update-status-btn:active {
      transform: translateY(0);
    }

    .user-item {
      display: flex;
      align-items: center;
      padding: 1.25rem;
      border-radius: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-bottom: 0.75rem;
      background: white;
      border: 2px solid transparent;
      position: relative;
      overflow: hidden;
    }

    .user-item::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      background: transparent;
      transition: all 0.3s ease;
    }

    .user-item:hover {
      background: var(--hover-color);
      transform: translateX(4px);
      box-shadow: 0 6px 20px rgba(0,0,0,0.1);
      border-color: var(--border-color);
    }

    .user-item:hover::before {
      background: var(--accent-color);
    }

    .user-item.active {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: white;
      transform: translateX(8px);
      box-shadow: 0 8px 25px rgba(18, 140, 126, 0.4);
      border-color: var(--primary-color);
    }

    .user-item.active::before {
      background: rgba(255,255,255,0.5);
      width: 6px;
    }

    .user-item.active .user-status,
    .user-item.active .user-online,
    .user-item.active .user-last-seen {
      color: rgba(255, 255, 255, 0.9) !important;
    }

    .user-avatar {
      width: 52px;
      height: 52px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--accent-color), var(--secondary-color));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 700;
      margin-right: 1rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      font-size: 1.2rem;
      position: relative;
      border: 3px solid rgba(255,255,255,0.3);
    }

    .user-avatar.online::after {
      content: '';
      position: absolute;
      bottom: 2px;
      right: 2px;
      width: 12px;
      height: 12px;
      background: var(--online-color);
      border-radius: 50%;
      border: 2px solid white;
    }

    .user-info {
      flex-grow: 1;
    }

    .user-name {
      font-weight: 700;
      font-size: 1.1rem;
      margin-bottom: 0.4rem;
      color: var(--dark-color);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .user-status {
      font-size: 0.9rem;
      color: var(--primary-color);
      font-weight: 500;
      margin-bottom: 0.25rem;
      opacity: 0.8;
    }

    .user-online {
      font-size: 0.8rem;
      color: var(--online-color);
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .user-last-seen {
      font-size: 0.8rem;
      color: #6b7280;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .status-indicator {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      display: inline-block;
      animation: pulse 2s infinite;
    }

    .status-indicator.online {
      background: var(--online-color);
    }

    .status-indicator.offline {
      background: var(--offline-color);
    }

    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    .main-chat {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      background: white;
      border-radius: 0 12px 12px 0;
    }

    .chat-header {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: white;
      padding: 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      border-radius: 0 12px 0 0;
      position: relative;
    }

    .chat-header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    }

    .chat-header h1 {
      font-size: 1.6rem;
      margin: 0;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .chat-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: rgba(255,255,255,0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
    }

    .user-status-header {
      font-size: 0.9rem;
      opacity: 0.9;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-top: 0.25rem;
    }

    .connection-status {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-size: 0.8rem;
      padding: 0.25rem 0.75rem;
      background: rgba(255,255,255,0.2);
      border-radius: 12px;
    }

    #messages {
      flex-grow: 1;
      overflow-y: auto;
      padding: 2rem;
      background: linear-gradient(180deg, #fafafa 0%, #f5f5f5 100%);
      background-image: 
        radial-gradient(circle at 1px 1px, rgba(0,0,0,.08) 1px, transparent 0);
      background-size: 24px 24px;
      position: relative;
    }

    .messages-container {
      position: relative;
      min-height: 100%;
    }

    .message {
      max-width: 75%;
      padding: 1.25rem 1.75rem;
      margin-bottom: 1.25rem;
      border-radius: 20px;
      position: relative;
      word-wrap: break-word;
      animation: slideIn 0.4s ease;
      box-shadow: 0 3px 15px rgba(0,0,0,0.1);
      backdrop-filter: blur(10px);
    }

    .message-sent {
      background: linear-gradient(135deg, var(--message-sent), #c8e6c9);
      margin-left: auto;
      border-bottom-right-radius: 6px;
      border: 1px solid rgba(76, 175, 80, 0.2);
    }

    .message-received {
      background: var(--message-received);
      margin-right: auto;
      border-bottom-left-radius: 6px;
      border: 1px solid var(--border-color);
    }

    .message-user {
      font-weight: 700;
      font-size: 0.95rem;
      margin-bottom: 0.75rem;
      color: var(--primary-color);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .message-text {
      font-size: 1rem;
      line-height: 1.6;
      color: var(--dark-color);
      margin-bottom: 0.5rem;
    }

    .message-image {
      max-width: 100%;
      border-radius: 12px;
      margin-top: 0.75rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      cursor: pointer;
      transition: transform 0.3s ease;
    }

    .message-image:hover {
      transform: scale(1.02);
    }

    .message-time {
      font-size: 0.75rem;
      color: #6b7280;
      text-align: right;
      margin-top: 0.5rem;
      font-weight: 500;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      gap: 0.5rem;
    }

    .message-status {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .typing-indicator {
      font-size: 0.9rem;
      color: var(--primary-color);
      padding: 1rem 2rem;
      font-style: italic;
      font-weight: 500;
      background: rgba(37, 211, 102, 0.1);
      border-radius: 12px;
      margin: 0.5rem 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      animation: fadeIn 0.3s ease;
    }

    .typing-dots {
      display: flex;
      gap: 3px;
    }

    .typing-dots span {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: var(--primary-color);
      animation: typing 1.4s infinite ease-in-out;
    }

    .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
    .typing-dots span:nth-child(2) { animation-delay: -0.16s; }

    @keyframes typing {
      0%, 80%, 100% { transform: scale(0); }
      40% { transform: scale(1); }
    }

    .chat-input-container {
      background: white;
      padding: 1.5rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      gap: 1rem;
      box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
      border-radius: 0 0 12px 0;
    }

    #input {
      flex-grow: 1;
      border-radius: 25px;
      padding: 1rem 1.5rem;
      border: 2px solid var(--border-color);
      font-size: 1rem;
      resize: none;
      transition: all 0.3s ease;
      background: var(--light-color);
    }

    #input:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 4px rgba(18, 140, 126, 0.1);
      background: white;
    }

    .btn-emoji, .btn-attach, .btn-send {
      border-radius: 50%;
      width: 52px;
      height: 52px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: none;
      transition: all 0.3s ease;
      font-size: 1.3rem;
      position: relative;
    }

    .btn-emoji, .btn-attach {
      background: var(--light-color);
      color: var(--primary-color);
      border: 2px solid var(--border-color);
    }

    .btn-emoji:hover, .btn-attach:hover {
      background: var(--hover-color);
      transform: scale(1.1);
      border-color: var(--primary-color);
    }

    .btn-send {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: white;
      box-shadow: 0 4px 12px rgba(37, 211, 102, 0.3);
    }

    .btn-send:hover {
      transform: scale(1.1);
      box-shadow: 0 6px 20px rgba(37, 211, 102, 0.5);
    }

    .btn-send:active {
      transform: scale(1.05);
    }

    .emoji-picker {
      position: absolute;
      bottom: 80px;
      left: 60px;
      background: white;
      border-radius: 20px;
      box-shadow: 0 10px 40px rgba(0,0,0,0.15);
      padding: 1.5rem;
      display: none;
      z-index: 1000;
      max-height: 250px;
      overflow-y: auto;
      border: 2px solid var(--border-color);
      width: 300px;
    }

    .emoji-picker.show {
      display: block;
      animation: fadeIn 0.3s ease;
    }

    .emoji-picker-header {
      font-weight: 600;
      color: var(--dark-color);
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
    }

    .emoji-option {
      font-size: 2rem;
      padding: 0.75rem;
      cursor: pointer;
      display: inline-block;
      border-radius: 12px;
      transition: all 0.2s ease;
    }

    .emoji-option:hover {
      transform: scale(1.3);
      background: var(--hover-color);
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      color: white;
      font-weight: 600;
      z-index: 2000;
      animation: slideInRight 0.3s ease;
    }

    .notification.success {
      background: linear-gradient(135deg, var(--success-color), #059669);
    }

    .notification.error {
      background: linear-gradient(135deg, var(--offline-color), #dc2626);
    }

    @keyframes slideInRight {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    /* Scrollbar styling */
    #messages::-webkit-scrollbar, .sidebar::-webkit-scrollbar, .emoji-picker::-webkit-scrollbar {
      width: 8px;
    }

    #messages::-webkit-scrollbar-track, .sidebar::-webkit-scrollbar-track, .emoji-picker::-webkit-scrollbar-track {
      background: rgba(0,0,0,0.05);
      border-radius: 4px;
    }

    #messages::-webkit-scrollbar-thumb, .sidebar::-webkit-scrollbar-thumb, .emoji-picker::-webkit-scrollbar-thumb {
      background: var(--primary-color);
      border-radius: 4px;
    }

    #messages::-webkit-scrollbar-thumb:hover, .sidebar::-webkit-scrollbar-thumb:hover, .emoji-picker::-webkit-scrollbar-thumb:hover {
      background: var(--secondary-color);
    }

    /* Mobile responsiveness */
    @media (max-width: 992px) {
      .sidebar {
        width: 320px;
      }
      .message {
        max-width: 85%;
      }
      .chat-container {
        margin: 4px;
        height: calc(100vh - 8px);
        border-radius: 8px;
      }
    }

    @media (max-width: 768px) {
      .sidebar {
        display: none;
        position: fixed;
        z-index: 1000;
        width: 100%;
        height: 100%;
        border-radius: 0;
      }
      .sidebar.show {
        display: flex;
      }
      .message {
        max-width: 90%;
        padding: 1rem 1.25rem;
      }
      .chat-header h1 {
        font-size: 1.3rem;
      }
      .chat-container {
        margin: 0;
        height: 100vh;
        border-radius: 0;
      }
      .main-chat {
        border-radius: 0;
      }
    }

    /* Loading animation */
    .loading-spinner {
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="sidebar">
      <div class="sidebar-header">
        <h2>
          <div class="app-logo">
            <i class="fas fa-comments"></i>
          </div>
          ChatApp
        </h2>
        <button class="btn btn-sm btn-outline-light" id="close-sidebar">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="user-list">
        <div class="status-section">
          <label for="status-input" class="form-label">
            <i class="fas fa-edit me-2"></i>Update Your Status
          </label>
          <input type="text" id="status-input" class="form-control" placeholder="What's on your mind?">
          <button id="update-status-btn" class="btn btn-primary mt-3 w-100">
            <i class="fas fa-paper-plane me-2"></i>Update Status
          </button>
        </div>
        
        <!-- Group Chat Item -->
        <div class="user-item" data-username="group">
          <div class="user-avatar">
            <i class="fas fa-users"></i>
          </div>
          <div class="user-info">
            <div class="user-name">
              <i class="fas fa-globe me-1"></i>
              Group Chat
            </div>
            <div class="user-status">Chat with everyone online</div>
            <div class="user-online">
              <span class="status-indicator online"></span>
              Always Available
            </div>
          </div>
        </div>

        <!-- Individual Users -->
        <% users.forEach(user => { %>
          <% if (user.username !== username) { %>
            <div class="user-item" data-username="<%= user.username %>">
              <div class="user-avatar <%= user.online ? 'online' : '' %>">
                <%= user.username.charAt(0).toUpperCase() %>
              </div>
              <div class="user-info">
                <div class="user-name">
                  <i class="fas fa-user me-1"></i>
                  <%= user.username %>
                </div>
                <div class="user-status">
                  <i class="fas fa-quote-left me-1"></i>
                  <%= user.status || 'Hey there! I am using ChatApp' %>
                </div>
                <div class="<%= user.online ? 'user-online' : 'user-last-seen' %>">
                  <span class="status-indicator <%= user.online ? 'online' : 'offline' %>"></span>
                  <%= user.online ? 'Online Now' : 'Last seen: ' + (user.lastSeen ? new Date(user.lastSeen).toLocaleString() : 'Unknown') %>
                </div>
              </div>
            </div>
          <% } %>
        <% }) %>
      </div>
    </div>

    <div class="main-chat">
      <div class="chat-header">
        <div>
          <h1>
            <div class="chat-avatar">
              <i class="fas fa-<%= recipient ? 'user' : 'users' %>"></i>
            </div>
            <span id="chat-title"><%= recipient ? 'Chat with ' + recipient : 'Group Chat' %></span>
          </h1>
          <div class="user-status-header">
            <div class="connection-status">
              <span class="status-indicator online"></span>
              Online as <%= username %>
            </div>
          </div>
        </div>
        <button class="btn btn-sm btn-outline-light" id="toggle-sidebar">
          <i class="fas fa-bars"></i>
        </button>
      </div>
      
      <div id="messages" class="list-unstyled">
        <div class="messages-container">
          <% messages.forEach(msg => { %>
            <% if (!recipient && !msg.recipient || recipient && (msg.user === username && msg.recipient === recipient || msg.user === recipient && msg.recipient === username)) { %>
              <div class="message <%= msg.user === username ? 'message-sent' : 'message-received' %>">
                <% if (msg.user !== username && !msg.recipient) { %>
                  <div class="message-user">
                    <i class="fas fa-user-circle"></i>
                    <%= msg.user %>
                  </div>
                <% } %>
                <% if (msg.messageType === 'text') { %>
                  <div class="message-text"><%= msg.text %></div>
                <% } else if (msg.messageType === 'image') { %>
                  <img src="<%= msg.imagePath %>" class="message-image" alt="Shared image" onclick="openImageModal(this.src)">
                <% } %>
                <div class="message-time">
                  <span><%= new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %></span>
                  <% if (msg.user === username) { %>
                    <div class="message-status">
                      <i class="fas fa-check-double" style="color: #34b7f1;"></i>
                    </div>
                  <% } %>
                </div>
              </div>
            <% } %>
          <% }) %>
        </div>
      </div>
      
      <div id="typing-indicator" class="typing-indicator" style="display: none;">
        <div class="typing-dots">
          <span></span>
          <span></span>
          <span></span>
        </div>
        <span class="typing-text">Someone is typing...</span>
      </div>
      
      <div class="chat-input-container">
        <button class="btn-emoji" id="btn-emoji" title="Add Emoji">
          <i class="far fa-smile"></i>
        </button>
        
        <div class="emoji-picker" id="emoji-picker">
          <div class="emoji-picker-header">
            <i class="fas fa-smile"></i>
            Choose an emoji
          </div>
          <!-- Emojis will be populated by JavaScript -->
        </div>
        
        <button class="btn-attach" id="btn-attach" title="Attach Image">
          <i class="fas fa-paperclip"></i>
        </button>
        
        <input type="file" id="image-upload" accept="image/jpeg,image/jpg,image/png,image/gif" style="display: none;">
        
        <input type="text" id="input" class="form-control" autocomplete="off" placeholder="Type your message...">
        
        <button class="btn-send" id="btn-send" title="Send Message">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  </div>

  <!-- Image Modal -->
  <div class="modal fade" id="imageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Image Preview</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body text-center">
          <img id="modalImage" src="" class="img-fluid" alt="Full size image">
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Socket.io -->
  <script src="/socket.io/socket.io.js"></script>
  
  <script>
document.addEventListener('DOMContentLoaded', function() {
  // Helper function to get cookie
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  }

  // Show notification
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
      <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
      ${message}
    `;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  // Open image modal
  window.openImageModal = function(src) {
    const modal = new bootstrap.Modal(document.getElementById('imageModal'));
    document.getElementById('modalImage').src = src;
    modal.show();
  };

  // Global variables
  const token = getCookie('token');
  const socket = io({ query: { token } });
  const currentUsername = `<%= username %>`;
  const recipientValue = `<%= recipient || '' %>`;
  let currentRecipient = recipientValue === '' ? null : recipientValue;

  // DOM elements
  const input = document.getElementById('input');
  const messages = document.getElementById('messages');
  const btnEmoji = document.getElementById('btn-emoji');
  const emojiPicker = document.getElementById('emoji-picker');
  const btnSend = document.getElementById('btn-send');
  const btnAttach = document.getElementById('btn-attach');
  const imageUpload = document.getElementById('image-upload');
  const statusInput = document.getElementById('status-input');
  const updateStatusBtn = document.getElementById('update-status-btn');
  const toggleSidebar = document.getElementById('toggle-sidebar');
  const closeSidebar = document.getElementById('close-sidebar');
  const sidebar = document.querySelector('.sidebar');
  const typingIndicator = document.getElementById('typing-indicator');
  const chatTitle = document.getElementById('chat-title');

  // Enhanced emojis array
  const emojis = [
    '😀', '😊', '😂', '🤣', '😍', '🥰', '😘', '😎', '🤔', '😮', '😢', '😭', 
    '😡', '🤬', '👍', '👎', '👏', '🙌', '🤝', '💪', '🔥', '💯', '❤️', '💔', 
    '💕', '🎉', '🎊', '🌟', '⭐', '🚀', '💎', '🎯', '🎪', '🎭', '🎨', '🎬'
  ];

  // Populate emoji picker
  emojis.forEach(emoji => {
    const span = document.createElement('span');
    span.className = 'emoji-option';
    span.textContent = emoji;
    span.addEventListener('click', () => {
      input.value += emoji;
      input.focus();
      emojiPicker.classList.remove('show');
    });
    emojiPicker.appendChild(span);
  });

  // Event listeners
  btnEmoji.addEventListener('click', (e) => {
    e.preventDefault();
    emojiPicker.classList.toggle('show');
  });

  document.addEventListener('click', (e) => {
    if (!btnEmoji.contains(e.target) && !emojiPicker.contains(e.target)) {
      emojiPicker.classList.remove('show');
    }
  });

  toggleSidebar.addEventListener('click', () => {
    sidebar.classList.toggle('show');
  });

  closeSidebar.addEventListener('click', () => {
    sidebar.classList.remove('show');
  });

  // User selection with event delegation
  document.querySelector('.user-list').addEventListener('click', function(e) {
    const userItem = e.target.closest('.user-item');
    if (userItem) {
      const username = userItem.dataset.username;
      selectChat(username);
    }
  });

  function selectChat(recipient) {
    // Update active state
    document.querySelectorAll('.user-item').forEach(item => {
      item.classList.remove('active');
    });
    
    const selectedItem = document.querySelector(`[data-username="${recipient}"]`);
    if (selectedItem) {
      selectedItem.classList.add('active');
    }

    // Navigate to chat
    if (recipient === 'group') {
      window.location.href = '/chat';
    } else {
      window.location.href = `/chat/${recipient}`;
    }
  }

  // Message sending
  btnSend.addEventListener('click', (e) => {
    e.preventDefault();
    sendMessage();
  });

  input.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  function sendMessage() {
    if (input.value.trim()) {
      // Show loading state
      btnSend.innerHTML = '<div class="loading-spinner"></div>';
      btnSend.disabled = true;
      
      socket.emit('chat message', { 
        user: currentUsername, 
        text: input.value.trim(),
        recipient: currentRecipient
      });
      input.value = '';
      
      // Reset button after a short delay
      setTimeout(() => {
        btnSend.innerHTML = '<i class="fas fa-paper-plane"></i>';
        btnSend.disabled = false;
      }, 500);
    }
  }

  // Image upload
  btnAttach.addEventListener('click', () => {
    imageUpload.click();
  });

  imageUpload.addEventListener('change', () => {
    const file = imageUpload.files[0];
    if (file) {
      // Show loading state
      btnAttach.innerHTML = '<div class="loading-spinner"></div>';
      
      const formData = new FormData();
      formData.append('image', file);
      if (currentRecipient) {
        formData.append('recipient', currentRecipient);
      }
      
      fetch('/upload-image', {
        method: 'POST',
        body: formData
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            showNotification('Image uploaded successfully!', 'success');
          } else {
            showNotification(data.error || 'Image upload failed', 'error');
          }
        })
        .catch(err => {
          console.error('Image upload error:', err);
          showNotification('Image upload failed', 'error');
        })
        .finally(() => {
          btnAttach.innerHTML = '<i class="fas fa-paperclip"></i>';
        });
    }
  });

  // Status update
  updateStatusBtn.addEventListener('click', () => {
    const status = statusInput.value.trim();
    if (status) {
      // Show loading state
      updateStatusBtn.innerHTML = '<div class="loading-spinner"></div> Updating...';
      updateStatusBtn.disabled = true;
      
      fetch('/update-status', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status })
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            statusInput.value = '';
            showNotification('Status updated successfully!', 'success');
            updateStatusBtn.innerHTML = '<i class="fas fa-check me-2"></i>Updated!';
            setTimeout(() => {
              updateStatusBtn.innerHTML = '<i class="fas fa-paper-plane me-2"></i>Update Status';
            }, 2000);
          } else {
            showNotification(data.error || 'Status update failed', 'error');
          }
        })
        .catch(err => {
          console.error('Status update error:', err);
          showNotification('Status update failed', 'error');
        })
        .finally(() => {
          updateStatusBtn.disabled = false;
        });
    }
  });

  // Socket event handlers
  socket.on('chat message', (msg) => {
    const isCurrentUser = msg.user === currentUsername;
    const shouldDisplay = !msg.recipient || 
                         (msg.recipient === currentRecipient && msg.user === currentUsername) || 
                         (msg.user === currentRecipient && msg.recipient === currentUsername) || 
                         (!currentRecipient && !msg.recipient);

    if (shouldDisplay) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${isCurrentUser ? 'message-sent' : 'message-received'}`;
      
      if (!isCurrentUser && !msg.recipient) {
        messageDiv.innerHTML += `
          <div class="message-user">
            <i class="fas fa-user-circle"></i>
            ${msg.user}
          </div>
        `;
      }
      
      if (msg.messageType === 'text') {
        messageDiv.innerHTML += `<div class="message-text">${msg.text}</div>`;
      } else if (msg.messageType === 'image') {
        messageDiv.innerHTML += `<img src="${msg.imagePath}" class="message-image" alt="Shared image" onclick="openImageModal('${msg.imagePath}')">`;
      }
      
      messageDiv.innerHTML += `
        <div class="message-time">
          <span>${new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
          ${isCurrentUser ? '<div class="message-status"><i class="fas fa-check-double" style="color: #34b7f1;"></i></div>' : ''}
        </div>
      `;
      
      messages.querySelector('.messages-container').appendChild(messageDiv);
      scrollToBottom();
    }
  });

  // Enhanced typing indicators
  let typingTimeout;
  input.addEventListener('input', () => {
    socket.emit('typing', { user: currentUsername, recipient: currentRecipient });
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
      socket.emit('stop typing', { user: currentUsername, recipient: currentRecipient });
    }, 1000);
  });

  socket.on('typing', (data) => {
    if ((!data.recipient && !currentRecipient) || (data.recipient === currentUsername && data.user === currentRecipient)) {
      typingIndicator.querySelector('.typing-text').textContent = `${data.user} is typing...`;
      typingIndicator.style.display = 'flex';
    }
  });

  socket.on('stop typing', (data) => {
    if ((!data.recipient && !currentRecipient) || (data.recipient === currentUsername && data.user === currentRecipient)) {
      typingIndicator.style.display = 'none';
    }
  });

  // Status updates
  socket.on('status update', (data) => {
    const userItems = document.querySelectorAll('.user-item');
    userItems.forEach(item => {
      const userName = item.dataset.username;
      if (userName === data.username) {
        if (data.status) {
          const statusEl = item.querySelector('.user-status');
          if (statusEl) statusEl.innerHTML = `<i class="fas fa-quote-left me-1"></i>${data.status}`;
        }
        if (data.online !== undefined) {
          const statusEl = item.querySelector('.user-online, .user-last-seen');
          const statusIndicator = item.querySelector('.status-indicator');
          const avatar = item.querySelector('.user-avatar');
          
          if (statusEl && statusIndicator) {
            statusEl.innerHTML = data.online ? 
              '<span class="status-indicator online"></span>Online Now' : 
              `<span class="status-indicator offline"></span>Last seen: ${new Date().toLocaleString()}`;
            statusEl.className = data.online ? 'user-online' : 'user-last-seen';
            statusIndicator.className = `status-indicator ${data.online ? 'online' : 'offline'}`;
            
            if (data.online) {
              avatar.classList.add('online');
            } else {
              avatar.classList.remove('online');
            }
          }
        }
      }
    });
  });

  function scrollToBottom() {
    messages.scrollTop = messages.scrollHeight;
  }

  // Initial setup
  scrollToBottom();
  
  // Set active chat
  if (currentRecipient) {
    const activeItem = document.querySelector(`[data-username="${currentRecipient}"]`);
    if (activeItem) activeItem.classList.add('active');
  } else {
    const groupItem = document.querySelector('[data-username="group"]');
    if (groupItem) groupItem.classList.add('active');
  }

  // Connection status indicator
  socket.on('connect', () => {
    showNotification('Connected to chat server', 'success');
  });

  socket.on('disconnect', () => {
    showNotification('Disconnected from server', 'error');
  });
});
</script>
</body>
</html>
